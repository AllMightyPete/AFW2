{
    "sourceFile": "Documentation/02_Developer_Guide/02_Codebase_Structure.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1745494434246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745934391408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,5 +58,7 @@\n     *   `preview_table_model.py`: Defines `PreviewTableModel` and `PreviewSortFilterProxyModel` for managing and displaying data in the GUI's preview table.\r\n *   `blenderscripts/`: Contains Python scripts (`create_nodegroups.py`, `create_materials.py`) designed to be executed *within* Blender for post-processing.\r\n *   `Presets/`: Contains supplier-specific configuration files in JSON format.\r\n *   `Testfiles/`: Contains example input assets for testing purposes.\r\n-*   `Tickets/`: Directory for issue and feature tracking using Markdown files.\n\\ No newline at end of file\n+*   `Tickets/`: Directory for issue and feature tracking using Markdown files.\r\n+\r\n+**Note on Data Passing:** As mentioned in the Architecture documentation, major changes to the data passing mechanisms between the GUI, Main (CLI orchestration), and `asset_processor` modules are currently being planned. The descriptions of module interactions and data flow within this document reflect the current state and will require review and updates once the plan for these changes is finalized.\n\\ No newline at end of file\n"
                }
            ],
            "date": 1745494434246,
            "name": "Commit-0",
            "content": "# Developer Guide: Codebase Structure\r\n\r\nThis document outlines the key files and directories within the Asset Processor Tool project.\r\n\r\n```\r\nAsset_processor_tool/\r\n├── asset_processor.py             # Core class handling single asset processing pipeline\r\n├── config.py                      # Core settings definition (output paths, resolutions, merge rules etc.)\r\n├── configuration.py               # Class for loading and accessing configuration (merges config.py and presets)\r\n├── detailed_documentation_plan.md # (Existing file, potentially outdated)\r\n├── Dockerfile                     # Instructions for building the Docker container image\r\n├── documentation_plan.md          # Plan for the new documentation structure (this plan)\r\n├── documentation.txt              # Original developer documentation (to be migrated)\r\n├── main.py                        # CLI Entry Point & processing orchestrator\r\n├── monitor.py                     # Directory monitoring script for automated processing\r\n├── readme.md                      # Original main documentation file (to be migrated)\r\n├── readme.md.bak                  # Backup of readme.md\r\n├── requirements-docker.txt        # Dependencies specifically for the Docker environment\r\n├── requirements.txt               # Python package dependencies for standard execution\r\n├── blenderscripts/                # Scripts for integration with Blender\r\n│   ├── create_materials.py        # Script to create materials linking to node groups\r\n│   └── create_nodegroups.py       # Script to create node groups from processed assets\r\n├── Deprecated-POC/                # Directory containing original proof of concept scripts\r\n│   ├── Blender-MaterialsFromNodegroups.py\r\n│   ├── Blender-NodegroupsFromPBRSETS.py\r\n│   └── Standalonebatcher-Main.py\r\n├── Documentation/                 # New directory for organized documentation (this structure)\r\n│   ├── 00_Overview.md\r\n│   ├── 01_User_Guide/\r\n│   └── 02_Developer_Guide/\r\n├── gui/                           # Contains files related to the Graphical User Interface\r\n│   ├── main_window.py             # Main GUI application window and layout\r\n│   ├── processing_handler.py      # Handles background processing logic for the GUI\r\n│   ├── prediction_handler.py      # Handles background file prediction/preview for the GUI\r\n│   ├── preview_table_model.py     # Model and proxy for the GUI's preview table\r\n│   └── ...                        # Other GUI components\r\n├── Presets/                       # Preset definition files\r\n│   ├── _template.json             # Template for creating new presets\r\n│   ├── Poliigon.json              # Example preset for Poliigon assets\r\n│   └── ...                        # Other presets\r\n├── Project Notes/                 # Directory for issue and feature tracking (Markdown files)\r\n│   ├── ...                        # Various planning and note files\r\n└── Testfiles/                     # Directory containing example input assets for testing\r\n    └── ...                        # Example asset ZIPs\r\n```\r\n\r\n**Key Files and Directories:**\r\n\r\n*   `asset_processor.py`: Contains the `AssetProcessor` class, the core logic for processing a single asset through the pipeline. Includes methods for classification, map processing, merging, metadata generation, and output organization. Also provides methods for predicting output structure used by the GUI.\r\n*   `configuration.py`: Defines the `Configuration` class. Responsible for loading core settings from `config.py` and merging them with a specified preset JSON file (`Presets/*.json`). Pre-compiles regex patterns from presets for efficiency.\r\n*   `config.py`: Stores global default settings, constants, and core rules (e.g., standard map types, default resolutions, merge rules, output format rules, Blender paths).\r\n*   `main.py`: Entry point for the Command-Line Interface (CLI). Handles argument parsing, logging setup, parallel processing orchestration (using `concurrent.futures.ProcessPoolExecutor`), calls `AssetProcessor` via a wrapper function, and optionally triggers Blender scripts.\r\n*   `monitor.py`: Implements the automated directory monitoring feature using the `watchdog` library. Contains the `ZipHandler` class to detect new ZIP files and trigger processing via `main.run_processing`.\r\n*   `gui/`: Directory containing all code related to the Graphical User Interface (GUI), built with PySide6.\r\n    *   `main_window.py`: Defines the `MainWindow` class, the main application window structure, UI layout, event handling, and menu setup. Manages GUI-specific logging (`QtLogHandler`).\r\n    *   `processing_handler.py`: Defines the `ProcessingHandler` class (runs on a `QThread`). Manages the execution of the main asset processing pipeline and Blender script execution in the background.\r\n    *   `prediction_handler.py`: Defines the `PredictionHandler` class (runs on a `QThread`). Manages background file analysis/preview generation.\r\n    *   `preview_table_model.py`: Defines `PreviewTableModel` and `PreviewSortFilterProxyModel` for managing and displaying data in the GUI's preview table.\r\n*   `blenderscripts/`: Contains Python scripts (`create_nodegroups.py`, `create_materials.py`) designed to be executed *within* Blender for post-processing.\r\n*   `Presets/`: Contains supplier-specific configuration files in JSON format.\r\n*   `Testfiles/`: Contains example input assets for testing purposes.\r\n*   `Tickets/`: Directory for issue and feature tracking using Markdown files."
        }
    ]
}