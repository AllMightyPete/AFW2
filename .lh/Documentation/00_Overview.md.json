{
    "sourceFile": "Documentation/00_Overview.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1745494293096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745495189201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,28 +11,28 @@\n This documentation strictly excludes details on environment setup, dependency installation, building the project, or deployment procedures, assuming familiarity with Python and the relevant libraries (OpenCV, NumPy, PySide6).\r\n \r\n ## Table of Contents\r\n \r\n-*   [Overview](00_Overview.md)\r\n-*   **User Guide**\r\n-    *   [Introduction](01_User_Guide/01_Introduction.md)\r\n-    *   [Features](01_User_Guide/02_Features.md)\r\n-    *   [Installation](01_User_Guide/03_Installation.md)\r\n-    *   [Configuration and Presets](01_User_Guide/04_Configuration_and_Presets.md)\r\n-    *   [Usage: GUI](01_User_Guide/05_Usage_GUI.md)\r\n-    *   [Usage: CLI](01_User_Guide/06_Usage_CLI.md)\r\n-    *   [Usage: Monitor](01_User_Guide/07_Usage_Monitor.md)\r\n-    *   [Usage: Blender Integration](01_User_Guide/08_Usage_Blender.md)\r\n-    *   [Output Structure](01_User_Guide/09_Output_Structure.md)\r\n-    *   [Docker](01_User_Guide/10_Docker.md)\r\n-*   **Developer Guide**\r\n-    *   [Architecture](02_Developer_Guide/01_Architecture.md)\r\n-    *   [Codebase Structure](02_Developer_Guide/02_Codebase_Structure.md)\r\n-    *   [Key Components](02_Developer_Guide/03_Key_Components.md)\r\n-    *   [Configuration System and Presets](02_Developer_Guide/04_Configuration_System_and_Presets.md)\r\n-    *   [Processing Pipeline](02_Developer_Guide/05_Processing_Pipeline.md)\r\n-    *   [GUI Internals](02_Developer_Guide/06_GUI_Internals.md)\r\n-    *   [Monitor Internals](02_Developer_Guide/07_Monitor_Internals.md)\r\n-    *   [Blender Integration Internals](02_Developer_Guide/08_Blender_Integration_Internals.md)\r\n-    *   [Development Workflow](02_Developer_Guide/09_Development_Workflow.md)\r\n-    *   [Coding Conventions](02_Developer_Guide/10_Coding_Conventions.md)\r\n-    *   [Debugging Notes](02_Developer_Guide/11_Debugging_Notes.md)\n\\ No newline at end of file\n+*   [Overview](00_Overview.md) - This document, providing a high-level summary and table of contents.\r\n+*   **User Guide** - Information for end-users of the tool.\r\n+    *   [Introduction](01_User_Guide/01_Introduction.md) - Purpose and scope of the tool for users.\r\n+    *   [Features](01_User_Guide/02_Features.md) - Detailed list of the tool's capabilities.\r\n+    *   [Installation](01_User_Guide/03_Installation.md) - Requirements and setup instructions.\r\n+    *   [Configuration and Presets](01_User_Guide/04_Configuration_and_Presets.md) - How to configure the tool and use presets.\r\n+    *   [Usage: GUI](01_User_Guide/05_Usage_GUI.md) - Guide to using the Graphical User Interface.\r\n+    *   [Usage: CLI](01_User_Guide/06_Usage_CLI.md) - Guide to using the Command-Line Interface.\r\n+    *   [Usage: Monitor](01_User_Guide/07_Usage_Monitor.md) - Guide to using the Directory Monitor for automated processing.\r\n+    *   [Usage: Blender Integration](01_User_Guide/08_Usage_Blender.md) - How the optional Blender integration works for users.\r\n+    *   [Output Structure](01_User_Guide/09_Output_Structure.md) - Description of the generated asset library structure.\r\n+    *   [Docker](01_User_Guide/10_Docker.md) - Instructions for using the tool with Docker.\r\n+*   **Developer Guide** - Technical information for developers contributing to the tool.\r\n+    *   [Architecture](02_Developer_Guide/01_Architecture.md) - High-level system design and component overview.\r\n+    *   [Codebase Structure](02_Developer_Guide/02_Codebase_Structure.md) - Detailed breakdown of project files and directories.\r\n+    *   [Key Components](02_Developer_Guide/03_Key_Components.md) - In-depth explanation of major classes and modules.\r\n+    *   [Configuration System and Presets](02_Developer_Guide/04_Configuration_System_and_Presets.md) - Technical details of configuration loading and preset structure.\r\n+    *   [Processing Pipeline](02_Developer_Guide/05_Processing_Pipeline.md) - Step-by-step technical breakdown of the asset processing logic.\r\n+    *   [GUI Internals](02_Developer_Guide/06_GUI_Internals.md) - Technical details of the GUI implementation (threading, signals, etc.).\r\n+    *   [Monitor Internals](02_Developer_Guide/07_Monitor_Internals.md) - Technical details of the Directory Monitor implementation.\r\n+    *   [Blender Integration Internals](02_Developer_Guide/08_Blender_Integration_Internals.md) - Technical details of Blender script execution and interaction.\r\n+    *   [Development Workflow](02_Developer_Guide/09_Development_Workflow.md) - Guidance on contributing and modifying the codebase.\r\n+    *   [Coding Conventions](02_Developer_Guide/10_Coding_Conventions.md) - Project's coding standards and practices.\r\n+    *   [Debugging Notes](02_Developer_Guide/11_Debugging_Notes.md) - Advanced internal details, state management, error handling, and limitations.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745506983704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n This documentation provides information about the Asset Processor Tool, covering both user-facing features and technical details for developers.\r\n \r\n ## Overview\r\n \r\n-This tool processes 3D asset source files (texture sets, models, etc., provided as ZIP archives or folders) into a standardized library format. It uses configurable presets to interpret different asset sources and automates tasks like file classification, image resizing, channel merging, and metadata generation.\r\n+This tool processes 3D asset source files (texture sets, models, etc., provided as ZIP, RAR, 7z archives, or folders) into a standardized library format. It uses configurable presets to interpret different asset sources and automates tasks like file classification, image resizing, channel merging, and metadata generation.\r\n \r\n The tool offers both a Graphical User Interface (GUI) for interactive use and a Command-Line Interface (CLI) for batch processing and scripting. It also includes a Directory Monitor for automated processing of assets dropped into a watched folder, and optional integration with Blender for automated material/nodegroup creation.\r\n \r\n This documentation strictly excludes details on environment setup, dependency installation, building the project, or deployment procedures, assuming familiarity with Python and the relevant libraries (OpenCV, NumPy, PySide6).\r\n"
                },
                {
                    "date": 1745934668650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,14 @@\n The tool offers both a Graphical User Interface (GUI) for interactive use and a Command-Line Interface (CLI) for batch processing and scripting. It also includes a Directory Monitor for automated processing of assets dropped into a watched folder, and optional integration with Blender for automated material/nodegroup creation.\r\n \r\n This documentation strictly excludes details on environment setup, dependency installation, building the project, or deployment procedures, assuming familiarity with Python and the relevant libraries (OpenCV, NumPy, PySide6).\r\n \r\n+## Architecture and Codebase Summary\r\n+\r\n+For developers interested in contributing, the tool's architecture is designed around a **Core Processing Engine** (`asset_processor.py`) that handles the pipeline for single assets, supported by a **Configuration System** (`configuration.py` and `config.py` with `Presets/*.json`). Multiple interfaces are provided: a **Graphical User Interface** (`gui/`), a **Command-Line Interface** (`main.py`), and a **Directory Monitor** (`monitor.py`). Optional **Blender Integration** (`blenderscripts/`) is also included.\r\n+\r\n+The codebase is organized into key directories and files reflecting these components. The `gui/` directory contains all GUI-related code, `Presets/` holds configuration presets, and `blenderscripts/` contains scripts for Blender interaction. The core logic resides in files like `asset_processor.py`, `configuration.py`, `config.py`, `main.py`, and `monitor.py`. The processing pipeline involves steps such as file classification, map processing, channel merging, and metadata generation.\r\n+\r\n ## Table of Contents\r\n \r\n *   [Overview](00_Overview.md) - This document, providing a high-level summary and table of contents.\r\n *   **User Guide** - Information for end-users of the tool.\r\n"
                }
            ],
            "date": 1745494293096,
            "name": "Commit-0",
            "content": "# Asset Processor Tool Documentation\r\n\r\nThis documentation provides information about the Asset Processor Tool, covering both user-facing features and technical details for developers.\r\n\r\n## Overview\r\n\r\nThis tool processes 3D asset source files (texture sets, models, etc., provided as ZIP archives or folders) into a standardized library format. It uses configurable presets to interpret different asset sources and automates tasks like file classification, image resizing, channel merging, and metadata generation.\r\n\r\nThe tool offers both a Graphical User Interface (GUI) for interactive use and a Command-Line Interface (CLI) for batch processing and scripting. It also includes a Directory Monitor for automated processing of assets dropped into a watched folder, and optional integration with Blender for automated material/nodegroup creation.\r\n\r\nThis documentation strictly excludes details on environment setup, dependency installation, building the project, or deployment procedures, assuming familiarity with Python and the relevant libraries (OpenCV, NumPy, PySide6).\r\n\r\n## Table of Contents\r\n\r\n*   [Overview](00_Overview.md)\r\n*   **User Guide**\r\n    *   [Introduction](01_User_Guide/01_Introduction.md)\r\n    *   [Features](01_User_Guide/02_Features.md)\r\n    *   [Installation](01_User_Guide/03_Installation.md)\r\n    *   [Configuration and Presets](01_User_Guide/04_Configuration_and_Presets.md)\r\n    *   [Usage: GUI](01_User_Guide/05_Usage_GUI.md)\r\n    *   [Usage: CLI](01_User_Guide/06_Usage_CLI.md)\r\n    *   [Usage: Monitor](01_User_Guide/07_Usage_Monitor.md)\r\n    *   [Usage: Blender Integration](01_User_Guide/08_Usage_Blender.md)\r\n    *   [Output Structure](01_User_Guide/09_Output_Structure.md)\r\n    *   [Docker](01_User_Guide/10_Docker.md)\r\n*   **Developer Guide**\r\n    *   [Architecture](02_Developer_Guide/01_Architecture.md)\r\n    *   [Codebase Structure](02_Developer_Guide/02_Codebase_Structure.md)\r\n    *   [Key Components](02_Developer_Guide/03_Key_Components.md)\r\n    *   [Configuration System and Presets](02_Developer_Guide/04_Configuration_System_and_Presets.md)\r\n    *   [Processing Pipeline](02_Developer_Guide/05_Processing_Pipeline.md)\r\n    *   [GUI Internals](02_Developer_Guide/06_GUI_Internals.md)\r\n    *   [Monitor Internals](02_Developer_Guide/07_Monitor_Internals.md)\r\n    *   [Blender Integration Internals](02_Developer_Guide/08_Blender_Integration_Internals.md)\r\n    *   [Development Workflow](02_Developer_Guide/09_Development_Workflow.md)\r\n    *   [Coding Conventions](02_Developer_Guide/10_Coding_Conventions.md)\r\n    *   [Debugging Notes](02_Developer_Guide/11_Debugging_Notes.md)"
        }
    ]
}